#include "InterruptHandler.h"
#include "Feedback.h"
#include "Settings.h"
#include "DelayedEvents.h"

//--------------------------------------------------------------------------------------------------------------------------------------
InterruptHandlerClass InterruptHandler;

//--------------------------------------------------------------------------------------------------------------------------------------
InterruptTimeList InterruptData; // список времён срабатываний прерываний на энкодере штанги
MachineState machineState = msIdle; // состояние конечного автомата

//--------------------------------------------------------------------------------------------------------------------------------------

volatile bool paused = false; // флаг, что обработчик - на паузе

//--------------------------------------------------------------------------------------------------------------------------------------
InterruptEventSubscriber* subscriber = NULL; // подписчик для обработки результатов пачки прерываний
//--------------------------------------------------------------------------------------------------------------------------------------
//void EncoderPulsesHandler() // обработчик импульсов энкодера
//{
//  if(paused) // на паузе
//  {
//    return;
//  }
//
// 
//       
//}
//--------------------------------------------------------------------------------------------------------------------------------------
InterruptHandlerClass::InterruptHandlerClass()
{
  subscriber = NULL;
  hasAlarm = false;
}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::begin()
{

//// резервируем память
//  InterruptData.reserve(MAX_PULSES_TO_CATCH);



}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::normalizeList(InterruptTimeList& list)
{
  //size_t sz = list.size();
  //
  //if(sz < 2)
  //  return;

  //// нормализуем список относительно первого значения
  //uint32_t first = list[0];
  //list[0] = 0;

  //for(size_t i=1;i<sz;i++)
  //{
  //  list[i] = (list[i] - first);
  //}
}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::pause()
{
  //if(paused) // уже на паузе
  //{
  //  return;
  //}

  //noInterrupts();
  //paused = true;
  //interrupts();
}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::resume()
{
  //if(!paused) // не на паузе
  //{
  //  return;
  //}

 
  //interrupts();  
}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::update()
{

  //if(paused) // на паузе
  //{
  //  return;
  //}

  //// проверяем состояние конечного автомата
  //switch(machineState)
  //{
  //  case msIdle:
  //  {
 
  //  }
  //  break; // msIdle

  //  
  //} // switch  
}
//--------------------------------------------------------------------------------------------------------------------------------------
InterruptEventSubscriber* InterruptHandlerClass::getSubscriber()
{
	return subscriber;
}
//--------------------------------------------------------------------------------------------------------------------------------------
void InterruptHandlerClass::setSubscriber(InterruptEventSubscriber* h)
{  
  // устанавливаем подписчика результатов прерываний.
  subscriber = h;
}
//--------------------------------------------------------------------------------------------------------------------------------------
