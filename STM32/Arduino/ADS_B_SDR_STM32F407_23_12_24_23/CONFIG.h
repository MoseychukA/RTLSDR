#pragma once
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <Wire.h>
#include "TinyVector.h"

//#define _MY_DEBUG // закомментировать для выключения отладочной информации
//#define _SETTINGS_LOAD_DEBUG // отладочный режим загрузки настроек из EEPROM (выводит ошибки чтения заголовков записей)
#define DEBUG_SERIAL Serial // какой Serial использовать для дебаг-режима

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SERIAL_SPEED            115200 // скорость работы с Serial

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка светодиодов
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LED_ON_LEVEL          LOW		// уровень включения светодиодов
#define LED_GREEN             PA6       // Индикация светодиодом "Готов"
#define LED_RED               PA7       // Индикация светодиодом "Авария"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка кнопок
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define BUTTON_0               PA0       // Кнопка №1,  
#define BUTTON_1               PE4       // Кнопка №2, 
#define BUTTON_3               PE3       // Кнопка №3, 


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Контроль источников питания
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define power_3V3                   PD11               // Контроль источника питания +3.3в
#define power_5V0                   PD12               // Контроль источника питания +5.0в


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ TFT
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_BUTTON_COLORS WHITE, LIGHTGREY, WHITE, RED, BLUE    // цвета для кнопок
#define TFT_BUTTON_COLORS2 WHITE, LIGHTGREY, WHITE, RED, 0x4DC9 // цвета для кнопок
#define TFT_BACK_COLOR BLACK                                    // цвет заливки экрана
#define TFT_FONT_COLOR WHITE                                    // цвет шрифта по умолчанию

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_INIT_DELAY                100            // сколько миллисекунд (при необходимости) ждать перед отсылкой первых команд на дисплей

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки тачскрина
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Тач-скрин сидит на SPI2 !!!

#define TFT_TOUCH_CS_PIN     PB12

#define  TOUCH_IRQ_Pin       GPIO_PIN_5   //  Определяем вывод информирующий о нажатии на тачскрин
#define  TOUCH_IRQ_GPIO_Port GPIOC        //  Определяем порт  TOUCH_IRQ_Pin
#define  TOUCH_PRESCALER     SPI_BAUDRATEPRESCALER_256 // прескалер для тача

#define  TOUCH_SCALE_X 320                // Рамер по горизонтали X
#define  TOUCH_SCALE_Y 240                // Рамер по вертикали  Y


#define  TOUCH_MIN_RAW_X 260              // Реальная минимальная величина по оси X (подстроить под конкретный дисплей)
#define  TOUCH_MAX_RAW_X 3655             // Реальная максимальная величина по оси X(подстроить под конкретный дисплей)

#define  TOUCH_MIN_RAW_Y 440              // Реальная минимальная величина по оси Y (подстроить под конкретный дисплей)
#define  TOUCH_MAX_RAW_Y 3690             // Реальная максимальная величина по оси Y(подстроить под конкретный дисплей)



//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define DATA_MEASURE_THRESHOLD                      2000 // через сколько миллисекунд обновлять показания с линий вольтажа и температуру с часов
//#define VOLTAGE_THRESHOLD                           10 // порог изменений, в процентах, для принятия решения о том, хороший вольтаж или нет

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// время в миллисекундах, после которого идёт переключение на главный экран, если какой-то экран висит долгое время
#define RESET_TO_MAIN_SCREEN_DELAY                    60000

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _MY_DEBUG
  #define DBG(s) { DEBUG_SERIAL << (s); DEBUG_SERIAL.flush(); }
  #define DBGLN(s) { DEBUG_SERIAL << (s) << ENDL; DEBUG_SERIAL.flush(); }
//  #define DBG(s) { delayMicroseconds(1000); }
//  #define DBGLN(s) { delayMicroseconds(1000); }

#else
  #define DBG(s) (void) 0
  #define DBGLN(s) (void) 0
#endif
#define ENDL '\n'
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T> inline Stream& operator << (Stream &s, T n) { s.print(n); return s; }
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define CORE_COMMAND_GET F("GET=") // префикс для команды получения данных из ядра
#define CORE_COMMAND_SET F("SET=") // префикс для команды сохранения данных в ядро
#define CORE_COMMAND_ANSWER_OK F("OK=") // какой префикс будет посылаться в ответ на команду получения данных и её успешной отработке
#define CORE_COMMAND_ANSWER_ERROR F("ER=") // какой префикс будет посылаться в ответ на команду получения данных и её неуспешной отработке
#define CORE_COMMAND_PARAM_DELIMITER '|' // разделитель параметров
#define CORE_END_OF_DATA F("[END]")
#define CORE_COMMAND_DONE F("DONE")
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
