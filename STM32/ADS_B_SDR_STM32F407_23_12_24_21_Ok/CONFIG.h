#pragma once
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <Wire.h>
#include "TinyVector.h"

//#define _MY_DEBUG // закомментировать для выключения отладочной информации
//#define _SETTINGS_LOAD_DEBUG // отладочный режим загрузки настроек из EEPROM (выводит ошибки чтения заголовков записей)
#define DEBUG_SERIAL Serial // какой Serial использовать для дебаг-режима


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// тип используемой EEPROM (МИНИМУМ 50 Кб объёмом, т.е. МИНИМУМ AT24C1024)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define EEPROM_CLASS AT24C1024 // поддерживаемые типы: AT24C128, AT24C256, AT24C512, AT24C1024 


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SERIAL_SPEED            115200 // скорость работы с Serial


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка светодиодов
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LED_ON_LEVEL          LOW		// уровень включения светодиодов
#define LED_READY             PA6       // Индикация светодиодом "Готов"
#define LED_FAILURE           PA7       // Индикация светодиодом "Авария"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка кнопок
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define BUTTON_RED                  PA0                  // Кнопка №1, красная
#define BUTTON_BLUE                 PE4                 // Кнопка №2, синяя
#define BUTTON_YELLOW               PE3                   // Кнопка №3, жёлтая

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Выход на АСУ ТП
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define out_asu_tp1                 PC6                //Выход 
#define asu_tp_level                HIGH               // уровень на выходе

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Контроль источников питания
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define power_3V3                   PD11               // Контроль источника питания +3.3в
#define power_5V0                   PD12               // Контроль источника питания +5.0в


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ TFT
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_BUTTON_COLORS WHITE, LIGHTGREY, WHITE, RED, BLUE    // цвета для кнопок
#define TFT_BUTTON_COLORS2 WHITE, LIGHTGREY, WHITE, RED, 0x4DC9 // цвета для кнопок
#define TFT_BACK_COLOR BLACK                                    // цвет заливки экрана
#define TFT_FONT_COLOR WHITE                                    // цвет шрифта по умолчанию

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_INIT_DELAY                100            // сколько миллисекунд (при необходимости) ждать перед отсылкой первых команд на дисплей

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки тачскрина
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Тач-скрин сидит на SPI2 !!!

#define TFT_TOUCH_CS_PIN     PB12

#define  TOUCH_IRQ_Pin       GPIO_PIN_5   //  Определяем вывод информирующий о нажатии на тачскрин
#define  TOUCH_IRQ_GPIO_Port GPIOC        //  Определяем порт  TOUCH_IRQ_Pin
#define  TOUCH_PRESCALER     SPI_BAUDRATEPRESCALER_256 // прескалер для тача

#define  TOUCH_SCALE_X 320                // Рамер по горизонтали X
#define  TOUCH_SCALE_Y 240                // Рамер по вертикали  Y


#define  TOUCH_MIN_RAW_X 260              // Реальная минимальная величина по оси X (подстроить под конкретный дисплей)
#define  TOUCH_MAX_RAW_X 3655             // Реальная максимальная величина по оси X(подстроить под конкретный дисплей)

#define  TOUCH_MIN_RAW_Y 440              // Реальная минимальная величина по оси Y (подстроить под конкретный дисплей)
#define  TOUCH_MAX_RAW_Y 3690             // Реальная максимальная величина по оси Y(подстроить под конкретный дисплей)



//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// концевики (индуктивные)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define ROD_ENDSTOP_UP                PC0          // Концевик позиции штанги №1, вверху
#define ROD_ENDSTOP_DOWN              PC1          // Концевик позиции штанги №1, внизу
#define ENDSTOPS_INT_LEVEL            RISING       // уровень для прерывания
#define ENDSTOP_FREQUENCY             450          // рабочая частота импульсов концевика, Герц
#define ENDSTOP_HISTERESIS            30           // гистерезис частоты, Герц


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки АЦП
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
ch7:A0
ch6:A1
ch5:A2
ch4:A3  Вход токового трансформатора №3 (4)
ch3:A4  Вход токового трансформатора №2 (3)
ch2:A5  Вход токового трансформатора №1 (2)
ch1:A6  Вход индуктивного датчика №1 тест исправности датчика (1)
ch0:A7  Вход индуктивного датчика №2 тест исправности датчика (0)
ch10:A8 Вход индуктивного датчика №3 тест исправности датчика (5)
ch11:A9 Измерение =200В  (6)
ch12:A10 Измерение 3V3   (7)
ch13:A11 Измерение +5V   (8)
*/

#define NUMBER_OF_BUFFERS 6                                            // Установить количество буферов
#define SAMPLING_RATE 21000   // период таймера 3
#define NUM_CHANNELS 4   // Установить количество аналоговых входов
#define ADC_BUFFER_SIZE 200*NUM_CHANNELS                                   // Определить размер буфера хранения измеряемого сигнала     


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройка логов
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LOGS_DIRECTORY                              "/LOG" // папка, в которой лежат логи
#define ETHALONS_DIRECTORY                          "/ETL" // папка, где лежат эталоны
#define ETHALON_NAME_PREFIX                         "/et" // префикс имени файла эталона
#define ETHALON_UP_POSTFIX                          "up" // постфикс для имени файла эталона, поднятие штанги
#define ETHALON_DOWN_POSTFIX                        "dwn" // постфикс для имени файла эталона, опускание штанги
#define ETHALON_FILE_EXT                            ".etl" // расширение файла эталона
#define ETHALON_RECORD_TIMEOUT	                    10000 // таймаут, миллисекунд, при записи эталона с конфигуратора
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define DATA_MEASURE_THRESHOLD                      2000 // через сколько миллисекунд обновлять показания с линий вольтажа и температуру с часов
#define VOLTAGE_THRESHOLD                           10 // порог изменений, в процентах, для принятия решения о том, хороший вольтаж или нет
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки EEPROM
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// заголовки записей, которым нужны префиксы
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RECORD_HEADER1 0xD0
#define RECORD_HEADER2 0xEF
#define RECORD_HEADER3 0x18

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// адреса хранения в EEPROM
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define COUNT_PULSES_STORE_ADDRESS                   20 // по какому адресу храним переменную для кол-ва импульсов канала 1 (4 байта)
#define CHANNEL_PULSES_DELTA_ADDRESS                 40 // адрес хранения дельты импульсов канала 1 (3 байта)
#define MOTORESOURCE_STORE_ADDRESS                   60 // адрес хранения кол-ва срабатываний защиты канала 1 (6 байт)
#define MOTORESOURCE_MAX_STORE_ADDRESS               80 // адрес хранения макс. кол-ва срабатываний защиты канала 1 (6 байт)
#define UUID_STORE_ADDRESS                            130 // адрес хранения уникального идентификатора контроллера (32 байта идентификатор + 3 байта префикс = 35 байт)
#define TRANSFORMER_LOW_BORDER_STORE_ADDRESS          170 // адрес хранения нижнего порога токового трансформатора (6 байт)
#define TRANSFORMER_HIGH_BORDER_STORE_ADDRESS         180 // адрес хранения верхнего порога токового трансформатора (6 байт)
#define RELAY_DELAY_STORE_ADDRESS                     190 // адрес хранения задержки после срабатывания защиты и до начала импульсов (6 байт)
#define ACS_DELAY_STORE_ADDRESS                       200 // адрес хранения задержки после срабатывания защиты и до начала выдачи сигнала АСУ ТП (4 байта)
#define SKIP_COUNTER_STORE_ADDRESS                    210 // адрес хранения настройки пропуска импульсов (6 байт)
#define CURRENT_COEFF_STORE_ADDRESS                   220 // адрес хранения настройки коэффициента по току (6 байт)
#define ETHALON_DELTA_STORE_ADDRESS                   230 // адрес хранения настройки дельты времени импульсов для сравнения с эталоном (6 байт)
#define ASU_TP_SIGNALS_ADDRESS                        240 // адрес хранения настройки флагов выдачи внешних сигналов на АСУ ТП (3 байта)

#define EEPROM_LAST_3_DATA_ADDRESS                    2048 // адрес начала хранения последних трёх срабатываний в EEPROM (ПОКА ИСПОЛЬЗУЕТСЯ ТОЛЬКО ОДНО СРАБАТЫВАНИЕ !!!)
#define EEPROM_LAST_3_RECORD_SIZE                     45000ul // максимальный размер одной записи срабатывания, для хранения в EEPROM 45 000 байт на одну запись максимум)
//--------------------------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ ВНЕШНЕГО ВАТЧДОГА (актуально при раскомментированной команде USE_EXTERNAL_WATCHDOG)
//--------------------------------------------------------------------------------------------------------------------------------
#define USE_EXTERNAL_WATCHDOG // использовать или нет внешний ватчдог?
#define WATCHDOG_REBOOT_PIN PC13 // номер пина, на котором будут меняться уровни
#define WATCHDOG_NORMAL_LEVEL HIGH // уровень на ноге, который держится WATCHDOG_WORK_INTERVAL миллисекунд
#define WATCHDOG_TRIGGERED_LEVEL LOW // уровень импульса на ноге, который держится WATCHDOG_PULSE_DURATION миллисекунд
#define WATCHDOG_WORK_INTERVAL 5000 // через сколько миллисекунд на ноге будет уровень WATCHDOG_TRIGGERED_LEVEL
#define WATCHDOG_PULSE_DURATION 600 // сколько миллисекунд держать уровень WATCHDOG_TRIGGERED_LEVEL на ноге


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// время в миллисекундах, после которого идёт переключение на главный экран, если какой-то экран висит долгое время
#define RESET_TO_MAIN_SCREEN_DELAY                    60000
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// частота мигания надписью моторесурса, если он исчерпан, миллисекунд
#define MOTORESOURCE_BLINK_DURATION                   800

// через сколько процентов до максимального мигать надписью моторесурса (например, если уканано 10, то будет мигать после 90% выработки)
#define MOTORESOURCE_BLINK_PERCENTS                   10
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// кол-во кадров в секунду для отображения синусоид
#define CHART_FPS                                     30
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки порогов токового трансформатора по умолчанию
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TRANSFORMER_HIGH_DEFAULT_BORDER               3500 // верхний порог
#define TRANSFORMER_LOW_DEFAULT_BORDER                2500 // нижний порог
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// дальше лазить - НЕОСМОТРИТЕЛЬНО !!!!
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// \/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
extern TwoWire Wire1;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _MY_DEBUG
  #define DBG(s) { DEBUG_SERIAL << (s); DEBUG_SERIAL.flush(); }
  #define DBGLN(s) { DEBUG_SERIAL << (s) << ENDL; DEBUG_SERIAL.flush(); }
//  #define DBG(s) { delayMicroseconds(1000); }
//  #define DBGLN(s) { delayMicroseconds(1000); }

#else
  #define DBG(s) (void) 0
  #define DBGLN(s) (void) 0
#endif
#define ENDL '\n'
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T> inline Stream& operator << (Stream &s, T n) { s.print(n); return s; }
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define CORE_COMMAND_GET F("GET=") // префикс для команды получения данных из ядра
#define CORE_COMMAND_SET F("SET=") // префикс для команды сохранения данных в ядро
#define CORE_COMMAND_ANSWER_OK F("OK=") // какой префикс будет посылаться в ответ на команду получения данных и её успешной отработке
#define CORE_COMMAND_ANSWER_ERROR F("ER=") // какой префикс будет посылаться в ответ на команду получения данных и её неуспешной отработке
#define CORE_COMMAND_PARAM_DELIMITER '|' // разделитель параметров
#define CORE_END_OF_DATA F("[END]")
#define CORE_COMMAND_DONE F("DONE")
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//extern Vector<uint8_t> LastTriggeredInterruptRecord;
extern int8_t LastTriggeredInterruptRecordIndex;
